version: '3.8'

services:
  # Geopolitical Risk Assessment API
  geopolitical-api:
    build: .
    container_name: geopolitical-risk-api
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
      - HOST=0.0.0.0
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      # Optional: Mount logs directory
      - ./logs:/app/logs
    networks:
      - geopolitical-network

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: geopolitical-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - geopolitical-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Optional: Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: geopolitical-redis-ui
    hostname: redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - geopolitical-network
    profiles:
      - dev  # Only start with --profile dev

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: geopolitical-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - geopolitical-network
    profiles:
      - monitoring

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: geopolitical-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - geopolitical-network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  geopolitical-network:
    driver: bridge

# Additional configurations for different environments
# 
# Development environment:
# docker-compose --profile dev up -d
#
# Production environment:
# docker-compose up -d geopolitical-api redis
#
# With monitoring:
# docker-compose --profile monitoring up -d